swagger: "2.0"
info:
  description: "The best movie auth service"
  version: "1.0.0"
  title: "Moview theater auth"

host: "localhost:3000"
basePath: "/v1"
tags:
  - name: "auth"
    description: "Login, logout and refresh"
  - name: "user"
    description: "Operations about user"

schemes:
  - "http"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /login:
    post:
      tags:
        - "auth"
      summary: "Login in user"
      description: "Login in by email and password"
      operationId: "login"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User to to log in"
          required: true
          schema:
            $ref: "#/definitions/LoginModel"
      responses:
        "200":
          description: "Successfully logged in"
          schema:
            $ref: "#/definitions/TokensModel"
        "404":
          description: "User not found"

  /refresh:
    post:
      tags:
        - "auth"
      summary: "Refresh bearer token"
      description: "Get new access and refresh tokens"
      operationId: "refresh"
      produces:
        - "application/json"
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "Successfully logged in"
          schema:
            $ref: "#/definitions/TokensModel"
        "404":
          description: "User not found"

  /logout:
    delete:
      tags:
        - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      security:
        - Bearer: [ ]
      parameters: [ ]
      responses:
        default:
          description: "successful operation"

  /validate:
    get:
      tags:
        - "auth"
      summary: "Validate user by access token in header"
      description: ""
      operationId: "validateUser"
      produces:
        - "application/json"
      security:
        - Bearer: [ ]
      parameters: [ ]
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "Token is not valid"

  /user:
    post:
      tags:
        - "user"
      summary: "Register new user"
      description: "Registration by email and password"
      operationId: "registerUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object"
          required: true
          schema:
            $ref: "#/definitions/CreateUserModel"
      responses:
        "201":
          description: "New user d"
        "409":
          description: "Email is already taken"

  /user/admin:
    post:
      tags:
        - "user"
      summary: "Register new admin"
      description: "Registration by email and password"
      operationId: "registerAdminUser"
      produces:
        - "application/json"
      security:
        - Bearer: [ ]
      parameters:
        - in: "body"
          name: "body"
          description: "User object"
          required: true
          schema:
            $ref: "#/definitions/CreateAdminUserModel"
      responses:
        "201":
          description: "New user created"
        "409":
          description: "Email is already taken"
        "403":
          description: "Only admin can make this change"

  /user/{uuid}:
    get:
      tags:
        - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getUserByID"
      produces:
        - "application/json"
      security:
        - Bearer: [ ]
      parameters:
        - name: "uuid"
          in: "path"
          description: "ID of the user to be fetched"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"

    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the ADMIN in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "The uuid of user that needs to be deleted"
          required: true
          type: "string"
          format: "uuid"
      security:
        - Bearer: [ ]
      responses:
        "204":
          description: "User successfully deleted"
        "404":
          description: "User not found"
        "403":
          description: "Only admin can make this change"

  /user/{uuid}/password:
    patch:
      tags:
        - "user"
      summary: "Change users password"
      description: "This can only be done by the logged in user."
      operationId: "updateUsersPass"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "The uuid of user that needs to change password"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "User object that needs to change password"
          required: true
          schema:
            $ref: "#/definitions/UserForChangePassword"
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"

  /user/{uuid}/email:
    patch:
      tags:
        - "user"
      summary: "Change user's email"
      description: "This can only be done by the logged in user."
      operationId: "updateUsersEmail"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "The uuid of user that needs to change email"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "New email for user"
          required: true
          schema:
            $ref: "#/definitions/EmailToChange"
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"

  /user/{uuid}/role:
    patch:
      tags:
        - "user"
      summary: "Change user's role"
      description: "This can only be done by the logged in user"
      operationId: "updateUsersRole"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "The uuid of user that needs to change role"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "New role for user"
          required: true
          schema:
            $ref: "#/definitions/RoleToChange"
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
        "403":
          description: "Only admin can make this change"

  /user/{uuid}/history:
    get:
      tags:
        - "user"
      summary: "Get user's logging history"
      description: "This can only be done by the logged in user."
      operationId: "getUserHistory"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "The uuid of user whos history needs to be fetched"
          required: true
          type: "string"
          format: "uuid"
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/HistoryModel"
        "404":
          description: "User not found"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
        format: "email"
      last_login:
        type: "string"
        format: "date-time"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
      role:
        type: "string"
        enum:
          - user
          - privileged_user
          - admin


  CreateUserModel:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
        format: "email"
        example: "test@mail.ru"
      password:
        type: "string"
        example: "password"
        minLength: 6
        maxLength: 30
      first_name:
        type: "string"
        example: "Alex"
      last_name:
        type: "string"
        example: "Pain"
      role:
        type: "string"
        enum:
          - user
          - privileged_user
        example: "user"

  CreateAdminUserModel:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
        format: "email"
        example: "admin@yandex.ru"
      password:
        type: "string"
        example: "password"
        minLength: 6
        maxLength: 30
      first_name:
        type: "string"
        example: "Alex"
      last_name:
        type: "string"
        example: "Main"

  EmailToChange:
    type: "object"
    required:
      - "email"
    properties:
      email:
        type: "string"
        format: "email"
        example: "test@mail.ru"

  RoleToChange:
    type: "object"
    required:
      - "role"
    properties:
      role:
        type: "string"
        enum:
          - user
          - privileged_user
          - admin
        example: "admin"

  UserForChangePassword:
    type: "object"
    required:
      - "password"
      - "new_password"
      - "new_password_again"
    properties:
      password:
        type: "string"
        format: "password"
        example: "password"
        minLength: 3
        maxLength: 20
      new_password:
        type: "string"
        format: "password"
        example: "new_password"
        minLength: 3
        maxLength: 20
      new_password_again:
        type: "string"
        format: "password"
        example: "new_password"
        minLength: 3
        maxLength: 20

  LoginModel:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
        format: "email"
        example: "test@mail.ru"
      password:
        type: "string"
        example: "password"
        minLength: 6
        maxLength: 30

  SocialLoginModel:
    type: "object"
    required:
      - "code"
    properties:
      code:
        type: "string"
        example: "I6ZmFsc2UsImlhdCI6MTYyMjEwOTk2NSwianRpIjoiNDRmYjU"

  TokensModel:
    type: "object"
    properties:
      access:
        type: "string"
        example: "jasldjfpu9y347yylhdkjhlakjshdyutFFdksj"
      refresh:
        type: "string"
        example: "jHHJjdhhlkw8778lkhjlkjhkjlhaady37777tT"

  RefreshTockenModel:
    type: "object"
    properties:
      refresh:
        type: "string"
        example: "jHHJjdhhlkw8778lkhjlkjhkjlhaady37777tT"

  HistoryModel:
    type: "object"
    properties:
      date:
        type: "string"
        format: "date-time"
        example: "jasldjfpu9y347yylhdkjhlakjshdyutFFdksj"
      user_agent:
        type: "string"
        example: "Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0"
      user_device_type:
        type: "string"
        example: "desktop"
